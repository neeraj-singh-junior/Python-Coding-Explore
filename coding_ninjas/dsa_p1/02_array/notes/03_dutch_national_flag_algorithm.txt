'''
-------------------------------------------------------------------------------------
-> Title : Array Notes
-> Author : @neeraj-singh-jr
-> Status : Completed
-> Created : 03-06-2023
-> Updated : 03-06-2023
-> Summary : Notes indices are as follows (**** pending)
-------------------------------------------------------------------------------------
-> Q001 : DUTCH NATIONAL FLAG - Algorithm;;
-------------------------------------------------------------------------------------
'''

###---ARRAY NOTES : BEGINNING 

-------------------------------------------------------------------------------------
-> Q001 : DUTCH NATIONAL FLAG - Algorithm;;

###--- Problem Description 

-> Given an array consisting of only 0s, 1s and 2s, sort the array.

###--- NAIVE APPROACH : 

-> Simply sort the array with the help of sorting algorithms like Merge Sort,
   Quick Sort. This gives a time complexity of O(N*logN), where N is the
   number of elements in the array.

###--- TWO PASS ALGORITHM: 

-> The solution involves iterating through the original array and counting the
   number of 0s, 1s, and 2s, and just overwriting the original array in a
   second pass. The only disadvantage is that we need to traverse the array
   twice to get a sorted array.

-> Steps: 
	- Traverse the array once and keep track of the count of 0s, 1s and 2s
	  encountered. 
	- Now traverse the array again and overwrite the array starting from the
	  beginning, first with 0s, then 1s, and finally all 2s.

-> CODE SNIPPET:

def sort012_v1(arr, n) :
    # time: o(n), space: o(1)
    nums = {0:0, 1:0, 2:0}
    for a in arr:
        nums[a] += 1
    arr.clear()
    for i in [0,1,2]:
        arr += [i]*nums[i]

###--- DUTCH NATIONAL FLAG Approach 

-> The Dutch National Flag algorithm or three-way partitioning algorithm
   allows sorting the array consisting of 0s, 1s, and 2s in a single
   traversal only and in constant space

-> Steps To Consider:
	
Step 1: Maintain three indices low = 0, mid = 0, and high = N-1, where N is
the number of elements in the array. 

	1) The range from 0 to low denotes the range containing 0s. 
	2) The range from low to mid denotes the range containing 1s. 
	3) The range from mid to high denotes the range containing any of 0s, 1s, or 2s. 
	4) The range from high to N-1 denotes the range containing 2s.

Step 2: The mid pointer denotes the current element, traverses the array while
mid<=high i.e we have exhausted the search space for the range which can
contain any of 0s, 1s, or 2s. 

	1) If A[mid] == 0, swap A[mid] and A[low] and increment low and mid pointers by 1. 
	2) If A[mid] == 1, increment the mid pointer by 1. 
	3) If A[mid] == 2, swap A[high] and A[mid] and increment mid by 1 and decrement high by 1

Step 3: The resulting array will be a sorted array containing 0s, 1s, and 2s.

-> CODE SNIPPET:

def sort012(arr, n) :
    low, mid, high = 0, 0, len(arr)-1
    while(mid <= high):
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        elif arr[mid] == 2:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1

-------------------------------------------------------------------------------------