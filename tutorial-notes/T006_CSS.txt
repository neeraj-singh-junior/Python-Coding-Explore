'''
-------------------------------------------------------------------------------------
-> Title : CSS Notes
-> Author : Neeraj Singh Junior
-> Status : Ongoing...
-> Created : 03/02/2023
-> Updated : 04/02/2023
-> Summary : Notes indices are as follows (**** pending)
-------------------------------------------------------------------------------------
-> Q016 : Styling Forms in CSS;;
-> Q015 : Styling Tables in CSS;;
-> Q014 : Styling Un/Ordered List in CSS 
-> Q013 : Styling Anchor Links in CSS;
-> Q012 : Opacity in CSS;
-> Q011 : Borders in CSS;
-> Q010 : Backgrounds in CSS;;
-> Q009 : Text Formatting in CSS;;
-> Q008 : Spacing With Padding in CSS;;
-> Q007 : Spacing With Margin in CSS;;
-> Q006 : Min Width and Min Height;;
-> Q005 : Max Width and Max Height;;
-> Q004 : CSS Sizing;;
-> Q003 : CSS Color;;
-> Q002 : Selectors Brief;;
-> Q001 : CSS Core;;
-------------------------------------------------------------------------------------
'''

###---CSS NOTES : BEGINNING 

-------------------------------------------------------------------------------------
-> Q016 : Styling Forms in CSS;;

###---------------- Styling Width & Height for Text Inputs :-

The text fields and textareas in forms can be styled in multiple ways using
width, height, padding, border, color, background-color and fonts. 

for eg,
<!-- 
	!! Refer HTML !!
-->
<!-- HTML -->
<body>
	<form>
		<input type="text" placeholder="Your Name" /><br>
		<input type="radio" id="male" name="gender" value="male">
		<label for="male">Male</label>
		<input type="radio" id="female" name="gender" value="female">
		<label for="female">Female</label>
		<input type="radio" id="other" name="gender" value="other">
		<label for="other">Other</label><br>
		<input type="button" value="Submit">
	</form>
</body>

<!-- CSS -->
form {
  width: 300px;
  border: 3px solid black;
}
input {
  width: 200px;
  height: 25px;
}
textarea {
  width: 100%;
  height: 100px;
}

###---------------- Style Input by type :-

Select each input type differently, we can use it like this -

input[type="value"]

for eg,
<!-- CSS -->
input[type="text"] {
  width: 300px;
  height: 25px;
  margin-bottom: 20px;
}
input[type="radio"] {
  width: 50px;
  height: 10px;
}
input[type="button"] {
  margin-top: 20px;
  width: 200px;
  height: 25px;
}

###---------------- Padding & Margin for text inputs :-

Padding and Margin can be used inside the text inputs. 

for eg,
<!-- CSS -->
input[type="text"], textarea {
  padding: 15px;
  margin: 10px 0;
  width: 300px;
}

###---------------- Styling with Borders and Colors :-

Text input fields and textareas have a border by default. But we can change
their look using the border property.

for eg,
<!-- CSS -->
input[type="text"], textarea {
  width: 300px;
  padding: 15px;
  margin: 10px 0;
  color: indigo;	
  background-color: lavender;
}
input[type="text"] {
  border: none;
  border-bottom: 1px solid lightgray;
   border-radius: 10px;
}
textarea {
  border: 1px solid lightgray;
}

###---------------- Styling Font-Family and Font-Size :-

By default, the text field has a sans-serif font and the textarea has a serif
font. The font sizes are different too.

Most of the HTML elements inherit the font family and font size from body, but
the text input fields don't. They use their default values. 

TO customize, we need to specify these properties separately

for eg,
input[type="text"], textarea {
  width: 300px;
  padding: 15px;
  margin: 5px 0;
  width: 20em;
  border: 1px solid lightgray;
  font-family: 'Helvetica', sans-serif;
  font-size: 1em;
}

###---------------- Textarea resize :-

The textarea field can be resized when you drag the resizer at the bottom
right corner in any direction. To prevent resizing horizontally, vertically
or in both directions, we can use the resize property.

Default value for this property is both which allows resizing in both vertical
and horizontal direction. 

Other accepted values are horizontal, vertical, and none.

for eg,
<!-- HTML -->
<form>
  <p>Try dragging the resizer and notice that you can resize it only vertically:</p>
  <textarea id = "vertical-resizer" rows="4" placeholder="Vertical Slider"></textarea>

  <p>Try dragging the resizer and notice that you can resize it only horizontally:</p>
  <textarea id = "horizontal-resizer" rows="4" placeholder="Horizonal Slider"></textarea>
</form>

<!-- CSS -->
textarea {
  width: 70%;
  padding: 15px;
  border: 1px solid lightgray;
}
#horizontal-resizer {
    resize: horizontal;
}
#vertical-resizer {
    resize: vertical;
}

###---------------- Styling Select Inputs :-

The select input can be styled in the standard manner much like any other HTML
element or a form element

for eg,
<!-- HTML -->
<form>
  <fieldset>
    <legend>Styling Select</legend>
    <p>Are you happy with our service?</p>
	  <select name="review">
	    <option value="5">Very Happy</option>
	    <option value="4">Satisfied</option>
	    <option value="3">Neutral</option>
	    <option value="2">Unhappy</option>
	    <option value="1">Disappointed</option>
	  </select>  
  </fieldset>
</form>

<!-- CSS -->
select {
  width: 300px;
  padding: 15px;
  margin: 5px 0;
  width: 20em;
  border: 1px solid lightgray;
  background-color: beige;
  font-family: 'Helvetica', sans-serif;
  font-size: 1em;
}
select > option {
  font-size: 1.5em;
  line-height: 1px;
}

###---------------- Styling Border :-

Buttons can be styled in various ways using the standard properties - width,
height, padding, background-color, color, border, border-radius, font-family,
font-size.

for eg,
<!-- HTML -->
<form
	<input type="button" value="Next"/>
	<input type="reset" value="Reset"/>
	<input type="submit" value="Submit"/>
</form>


<!-- CSS -->
input[type="button"] {
  width: 100px;
  padding: 12px 16px;
  background-color: #4568bb;
  color: white;
  font-family: sans-serif;
  font-size: 0.9em;
  border: none;
  border-radius: 5px;
}
input[type="reset"] {
  width: 100px;
  padding: 12px 16px;
  margin-left: 10px;
  background-color: white;
  color: #4568bb;
  font-family: sans-serif;
  font-size: 0.9em;
  border: 1px solid #4568bb;
  border-radius: 5px;
}
input[type="submit"] {
  width: 100%;
  padding: 15px 0;
  margin-top: 10px;
  background-color: green;
  color: white;
  font-family: sans-serif;
  font-size: 1em;
  border: none;
}

###---------------- Hover & Focus Styles

When you take your mouse over a text input or a button, the background or
border colour can be changed using the :hover pseudo-class selector.

when you tap on an input field or move focus to it using the tab key on your
keyboard, a blue outline appears around the input field. This style can be
changed using the :focus pseudo-class selector.

for eg,
<!-- HTML -->
<input type="text" id="email" placeholder="Email ID" />
<input type="button" id="subscribe" value="Subscribe" /

<!-- CSS -->
#email {
  border: solid 1px #dddddd;
  padding: 10px;
}
#subscribe {
  padding: 10px;
  border: none;
  background-color: #6789ff;
  color: white;
}
/* Same hover & focus styles */
#email:hover, #email:focus {
  border: solid 1px #888888;
  outline: none;
}
#subscribe:hover, #subscribe:focus {
  background-color: #4567de;
  cursor: pointer;
}


-------------------------------------------------------------------------------------
-> Q015 : Styling Tables in CSS;;

###---------------- Table Border :-

The border property for the table element adds a border around the table:

for eg, 
<!-- 
Refer This table for Every example
-->
<!-- HTML -->
<body>
	<table>
	  <tr>
	    <th>Name</th>
	    <th>Age</th>
	    <th>Gender</th>
	  </tr>
	  <tr>
	    <td>Oliver</td>
	    <td>25</td>
	    <td>Male</td>
	  </tr>
	  <tr>
	    <td>Eve</td>
	    <td>30</td>
	    <td>Female</td>
	  </tr>
	</table>
</body>

<!-- CSS -->
table, th, td {
  border: 1px solid darkgray;
}

###---------------- Table Collapse :-

When we add borders around cells, we get double borders. We can use the
property border-collapse to change this behavior.

Default value for this property is separate.

for eg,
<!-- CSS -->
table, th, td {
  border: 1px solid darkgray;
  border-collapse: collapse;
}

###---------------- Table Width and Height :-

By default, the table occupies only as much width as required by the content.
But we can manually set the width for a table too.

If the specified width is smaller than the content width, the columns will
occupy the minimum width required to display the content properly.

If the specified width is larger than required, the additional width is added
to all the columns proportionately.

for eg,
<!-- CSS -->
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
table {
  width: 400px;
  height: 200px;
}
th {
  height: 55px;
}
td {
  height: 35px;
}

###---------------- Table Text Alignment - Horizontally :-

By default, the text in the header row is center aligned and the text in all
other rows is left aligned. The text-align property can be used to change
this alignment using the values left, right, center or justify

for eg,
<!-- CSS -->
table {
	width: 100%;
	text-align: center;
}
table > tr {
	height : 50px
}

###---------------- Table Text Alignment - Vertically :-

When you set a height for the entire table or for individual rows, the text is
vertically aligned to the middle by default. The vertical-align property can
be used to change this alignment using the values top, middle or bottom.

for eg,
<!-- CSS -->
table, th, td {
	width : 100%;
	border: 1px solid dark;
	border-collapse: collapse;
}
th, td {
	/** Text Alignments **/
	text-align: center;
	veritical-align: center;

	/** Padding Space **/
	padding : 10px 15px 10px 15px;
}
th {
	/* backgroud colors */
	background-color : blue;
}
td {
	/* background colors */
	background-color : lightgrey;
}

NOTE: The vertical-align property has no effect on the table selector.

###---------------- Styling Specific Rows (tr:tag):-

We can style specific rows of a table using pseudo classes like 

-> Select First Child, tr:first-child, 
	for eg, td:first-child 

-> Select Last Child, tr:last-child
	for eg, td:last-child 

-> Select nth child, tr:nth-child pseudo class 
	for eg, tr:nth-child(1)

-> Select Even or Odd child, 
	for eg, tr:nth-child(even), tr:nth-child(odd)

###---------------- Styling Specific Columns (td:tag):-

We can style specific columns of a table using pseudo classes like 

-> Select first child using, 
	for eg, td:first-child 

-> select the last child using, 
	for eg, td:last-child 

-> Select the nth-child using,
	for eg, td:nth-child(1)

-> Select the even or odd child,
	for eg, td:nth-child(even), td:nth-child(odd)


-------------------------------------------------------------------------------------
-> Q014 : Styling Un/Ordered List in CSS 

###---------------- Styling : Ordered and Unordered List :-

//--- List Style Type as decimal, alpha, roman, shapes :-

Unordered list, each item has a little circular disc as marker type by default. 

We can change this marker using the property 'list-style-type'.

Available Values for 'list-style-type' property :-
-> disc, circle
-> decimal
-> lower-alpha, upper-alpha
-> lower-roman, upper-roman

for eg,
<!-- HTML -->
<body>
	<h3> Styling Unordered List </h3>
	<ul>
	  <li>English</li>
	</ul>
</body>

<!-- CSS -->
ul {
	list-style-type: lower-alpha
}

//--- List Style Type as Image :-

The property 'list-style-image' can be used to display an image 
in place of the list item marker.

for eg,
<!-- HTML -->
<body>
	<ul>
		<li> Apple </li>
		<li> Mango </li>
		<li> Banana </li>
	</ul>
</body>

<!-- CSS -->
ul {
	list-style-image : url('new-marker.png');
}

//-- List Style Type Position :-

The list-style-position property is used to specify whether the list marker is
placed within the list text or outside the list text.

Default value for "list-style-position" : outer;

for eg,
<!-- HTML -->
<body>
	<h3>Un/Ordered List</h3>
	<ul id="inner-marker-pointer">
		<li>Inner Item #1</li>
		<li>Inner Item #2</li>
		<li>Inner Item #3</li>
	</ul>
	<ul id="outer-marker-pointer">
		<li>Outer Item #1</li>
		<li>Outer Item #2</li>
		<li>Outer Item #3</li>
	</ul>
</body>

<!-- CSS -->
#inner-marker-pointer {
	list-style-type : lower-alpha;
	list-style-position : inner;
}
#outer-marker-position {
	list-style-type: lower-alpha;
	list-style-position : outer;
}


-------------------------------------------------------------------------------------
-> Q013 : Styling Text in CSS;

###---------------- Styling : Anchor Links :-

Links can be styled in many different ways using properties like color,
background-color, border, padding, text-decoration and so on:

<body>
	<a href="#" id="first">
	  Colored link
	</a>
</body>

<!-- CSS -->
a {
	text-decoration: none;
}

###---------------- Styling : Anchor Links With States :-

We can change the appearance of links not only like the normal elements, but
also depending on some user actions. Like when the user takes their cursor
over the link, or just when the user clicks the link or based on whether the
link was previously visited or not.

we use the following link states:

a:visited - Applies if the link was visited previously

a:hover - Applies when the user takes the cursor over the link

a:active - Applies when the link is just clicked

for eg,
<!-- HTML -->
<body>
	<p> PARAGRAPH	</p>
	<a href="#"> Hover and click </a>
</body>

<!--CSS -->
a {
  color: tomato;
}
a:visited {
  color: darkgrey;
}
a:hover {
  color: orange;
  text-decoration: none;
}
a:active {
  color: darkred;
}

Here, a:visited, a:hover and a:active are called Pseudo-class selectors.

a:active must be specified after a:hover and a:hover must be specified after
a:visited for the styles to take effect.


-------------------------------------------------------------------------------------
-> Q012 : Opacity in CSS;

###---------------- Opacity :-

The opacity property is used to define transparency for elements.

You can specify any value between 0.0 and 1.0.

Here, 0 is fully transparent, 0.5 is semi-transparent and 1 is fully opaque.

for eg,
<!-- HTML -->
<body>
	<button id="first">
	  Click me first
	</button>
	<button id="second">
	  Click me later
	</button>
</body>

<!-- CSS -->
#first {
	/* 
	Default value ~ 1  
	Full Opaque;
	*/
  opacity: 1;
}
#second {
  opacity: 0.3;
}

###---------------- Opacity using RGBA :-

When we set the opacity for a parent element, all the child elements also
inherit the same value:

Opacity of the div is set to 0.5, but the child elements h1 and p also become
semi-transparent. This makes it hard to read the text.

If we want the opacity to apply only to the background, we can specify the
background color value using rgba instead of using rgb.

rgba(red, green, blue, alpha)

The alpha parameter sets the opacity. It takes in any value ranging from 0.0
to 1.0

for eg,
<!-- HTML -->
<body>
	<div>
	  <h1>Autumn</h1>
	  <p>
	    Autumn, also known as fall, is one of the four temperate seasons. Outside the tropics, autumn marks the transition from summer to winter, in September (Northern Hemisphere) or March (Southern Hemisphere), when the duration of daylight becomes noticeably shorter and the temperature cools considerably.
	  </p>
	</div>
<body>

<!-- CSS -->
div {
  margin: 20px;
  padding: 30px;
  background-color: rgba(253,186,116,0.5);
}

-------------------------------------------------------------------------------------
-> Q011 : Borders in CSS;

###---------------- Border Color :-

The border-color property is used to specify the colour of the borders using
color names or RGB or HEX values.

When this property is not set, the border takes the value of the color
property of the element. The default value for color is black.

Border colour can also be set to transparent

for eg,
<!-- HTML -->
<body>
	<div id="first"> First </div>
</body>

<!-- CSS -->
#first {
	border-color : grey;
	border-width : 2px 3px 4px 1px;
	border-style : dashed;
}

###---------------- Border Style :-

The border-style property is used to identify the type of border:

for eg,
<!-- HTML -->
<body>
	<div id="first"> Border on all sides </div>
	<div id="second"> Green dotted border at the bottom </div>
	<button> Button with 3D effect </button>	
</body>

<!-- CSS -->
div {
  padding: 10px;
  margin: 10px;
}
#first {
  border-style: solid;
}
#second {
  border-style: dashed;
}
#third {
  border-style: double;
}

Border Style can be of different types :- 
solid, dashed, double, dotted, groove, ridge, inset, outset and none.

//--- Border Style With Multiple Values :-

For the four sides of an element, we can provide different border styles.

When this property has only one value specified, the same style is applied to
all four sides.

When it has two values, the first value is applied to the top and bottom borders, and the second value is applied to the right and left borders:

for eg,
<!-- HTML -->
<body>
	<div id="first"> Border on all sides </div>
</body>

<!-- CSS -->
#first {
	/* 
	For 2 side here have different styles
	border-style: dashed dotted;
	*/

	/* For 2 side here have different styles */

  border-style: dashed solid dotted outset;
}

###---------------- Border Width :-

The border-width property is used to specify the thickness of the borders.

For specifying values, we can use the standard absolute or relative units or
we can use values like thin, medium or thick.

When this property is not set, a medium border appears by default.

for eg,
<!-- HTML -->
<body>
	<div id="first"> Thin border </div>
</body>

<!-- CSS -->
#first {
  border-style: solid;
  border-width: 2px;
}

//--- Border Width With Multiple Values:-

We can specify one, two, three or four values for border-width for defining
different border thickness on different sides:

When it has two values, the first value is applied to the top and bottom
borders, and the second value is applied to the right and left borders

for eg,
<!-- HTML -->
<body>
	<div id="first">
  	Thin borders on top and bottom, 4px width on right and left.
	</div>
</body>

<!-- CSS : 2 Values Width -->
#first {
  border-style: solid;
  border-width: thin 4px;
}

<!-- CSS : 3 Values Width -->
#first {
  border-style: solid;
  border-width: 1px 2px 4px;
}

###---------------- Border Shorthand :-

The border properties in CSS are used to create borders around an HTML
element. We can control the width, color and the general styling of the
border using these properties.

Popular Border can be of different types :-
1) Dashed 
2) Dotted
3) Solid
4) Ridge 
5) Outset

for eg,
<!-- HTML -->
<body>
	<div id="first"> Border on all sides </div>
	<div id="second"> Green dotted border at the bottom </div>
	<button> Button with 3D effect </button>	
</body>

<!-- CSS -->
div {
	border : 2px solid dashed;
}
#first {
	border : 2px dashed darkgrey;
}
#second {
	border : 2px dotted organge;
}

###---------------- Border Sides :-

We can set different styles, widths and colours for the borders of the
different sides of an element. We do this by specifying multiple values for
the same property, like border-width: 3px 3px 4px 5px.

However, there are individual properties such as border-top-style,
border-right-width, border-bottom-color among others, for styling borders for
the specific sides.

for eg,
<!-- HTML -->
<body>
	<div id="first">
	  Left and right color properties
	</div>
	<div id="second">
	  Top and bottom style properties
	</div>
</body>

<!-- CSS -->
div {
  padding: 10px;
  margin: 10px;
}
#first {
  border-style: solid;
  border-left-color: red;
  border-right-color: green;
}
#second {
  border-top-style: dashed;
  border-bottom-style: dashed;
  border-color: #cccccc;
}

###---------------- Borders Corners :-

When you need rounded corners instead of the default sharp corners, you can
use the border-radius property.

for eg,
<!-- HTML -->
<div id="first"> </div>

<!-- CSS -->
#first {
  background-color: red;
  border: 5px solid darkred;
  border-radius: 50%;
}

//--- Border Corners With Multiple Values;

You can specify border radius for each corner individually using the properties:

border-top-left-radius
border-top-right-radius
border-bottom-left-radius
border-bottom-right-radius

for eg,
<div id="first"> Border Corner </div>

<!-- CSS -->
#first {
	border-top-left-radius : 10,
	border-top-right-radius : 10, 
	border-bottom-left-radius : 10, 
	border-bottom-right-radius : 10
}


-------------------------------------------------------------------------------------
-> Q010 : Backgrounds in CSS;;

###---------------- Background Color :-

We can add a background color to an HTML element using the background-color
property. Color can be specified using color names, HEX values or RGB values.

for eg,
<!-- HTML -->
<p>	Paragraph </p>

<!-- CSS -->
p {
	background-color: lightgrey;
	color: darkgrey;
}

###---------------- Background Image :-

An image can be added to the background of any element using the
background-image property.

for eg,
<!-- HTML -->
<body>
	<h1>Monsoon</h1>
	<p>
	  A monsoon is traditionally a seasonal reversing wind accompanied by corresponding changes in precipitation, but is now used to describe seasonal changes in atmospheric circulation and precipitation associated with the asymmetric heating of land and sea.
	</p>
</body>

<!-- CSS -->
body {
  background-image: url('https://images.pexels.com/photos/4913167/pexels-photo-4913167.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=600');
  padding: 30px;
  color: white;
}

###---------------- Background Repeat :-

By default, the background image repeats itself horizontally and vertically,
if it's smaller than the element. This can be changed using the
background-repeat property.

Required Values : 
repeat(default), no-repeat, repeat-x (horizontally), repeat-y (Vertically)

for eg,
<!-- HTML -->
<body>
	<h1>Monsoon</h1>
	<p>
	  A monsoon is traditionally a seasonal reversing wind accompanied by
	  corresponding changes in precipitation, but is now used to describe
	  seasonal changes in atmospheric circulation and precipitation associated
	  with the asymmetric heating of land and sea.
	</p>
</body>

<!-- CSS -->
body {
  padding: 60px;
  background-image: url('https://images.pexels.com/photos/2512387/pexels-photo-2512387.jpeg?auto=compress&cs=tinysrgb&w=150');
  background-repeat: repeat-x;
}

###---------------- Background Size :-

The background image for any element retains its original size. To adjust the
image size, we need to use the background-size property.

When this property is set to cover, the image stretches or scales down in size
to fill the entire container

We can also specify the exact width and height in pixels or percentage.

If only one value is specified, then width is set to that value and height is 
auto-adjusted 

If we want the image to be fully visible, then background size property can be
set to contain.

for eg,
<!-- HTML -->
<body>
	<div>
		<h1>Monsoon</h1>
		<p> A monsoon is traditionally a seasonal reversing wind accompanied by
		corresponding changes in precipitation, but is now used to describe
		seasonal changes in atmospheric circulation and precipitation associated
		with the asymmetric heating of land and sea.</p>
	</div>
</body>

<!-- CSS -->
div {
  padding: 60px;
  background-image: url('https://images.pexels.com/photos/2512387/pexels-photo-2512387.jpeg?auto=compress&cs=tinysrgb&w=400');
  /* Image stretches to occupy full space */
  background-size: cover;
}

###---------------- Background Position :-

By default, the background image starts at the top left corner of its HTML
element. This can be changed using the background-position property.

This property takes in two values like this: background-position: left center.
The first value is for the horizontal and the second one is for the vertical
position.

Required Values :- Top, Left, Right, Bottom 

for eg,
<!-- HTML -->
<body>
	<div> </div>
</body>

<!-- CSS -->
body {
	background-color: cyan	;
}
div {
	background-image : url('url-to-image');
	background-size : 250px 250px;
	background-position: center center;
	background-repeat: no-repeat;
}


-------------------------------------------------------------------------------------
-> Q009 : Text Formatting in CSS;;

###---------------- Text Color :-

We can set the colour of the text in any element on the web page using its color property.

The values can be color names, HEX values, or RGB values.

for eg,
<!-- HTML -->
<body>
	<h2>Hello World</h2>
	<p>Paragraph</p>
	<ul>
		<li>Item</li>
	</ul>
</body>

<!-- CSS -->
h2 {
  color: purple;
}
p {
  /* Crimson */
  color: #dc143c;
}
ul {
  /* DarkCyan */
  color: rgb(0, 139, 139);
}

###---------------- Text Alignments :-

We can make our text align the way we want, using the text-align property.
We can use the values left, right, center or justify to align the text
accordingly.

for eg,
<!-- HTML -->
<body>
	<h2>Hello World</h2>
	<p>Paragraph</p>
	<ul>
		<li>Item</li>
	</ul>
</body>

<!-- CSS -->
h2 {
  text-align: center;
}
p {
  text-align: justify;
}
ul {
  text-align: left;
  /* This is the default value */
}

###---------------- Text Decoration :-

We can underline text, strike through it or remove an underline using the
text-decoration property.

for eg,
<!-- HTML -->
<body>
	<h2>Hello World</h2>
	<p>Paragraph</p>
	<ul>
		<li>Item</li>
	</ul>
</body>

<!-- CSS -->
h2 {
  text-decoration: underline;
}
p {
  text-decoration: line-through;
}
ul {
  text-decoration: none;
  /* Removes default underline */
  color: purple;
}
ul > li {
  color: green;
}

###---------------- Text Line Height :-

We can control the space between lines of text using the line-height
property.

The value can be given as a unitless number like 1.5, 2 etc or in px, em, % or
even the keyword normal.

The number value or percentage is used as a multiplier. line-height: 1.5 means
the space between the lines will be 1.5 times the font size of the element.

The value of line-height: normal is set based on the browser's default value.

for eg,
<!-- HTML -->
<body>
	<h2>Hello World</h2>
	<p>Paragraph</p>
	<ul>
		<li>Item</li>
	</ul>
</body>

<!-- CSS -->
h2 {
  line-height: 1em;
}
p {
  line-height: 140%;
}
ul > li {
  line-height: 2;
}

###---------------- Text Letter Space :-

We can control the spacing between letters of the text using the
letter-spacing property.

A positive value increases the space between the letters in a word, while a
negative value decreases it.

for eg,
<!-- HTML -->
<body>
	<h2>Hello World</h2>
</body>

<!-- CSS -->
h2 {
  letter-spacing: 1em;
}

###---------------- Text Font Space :-

We can modify the size of any text using the font-size property.

for eg,
<!-- HTML -->
<body>
	<h1>The Solar System</h1>
	<p>
	  The Solar System is the gravitationally bound system of the Sun and the objects that orbit it, either directly or indirectly.
	</p>
</body>

<!-- CSS -->
h1 {
  font-size: 2.4em;
}
p {
  font-size: 120%;
}

###---------------- Text Font Weight :-

The font-weight property is used to make text bolder or lighter.

We can use values such as normal, bold, lighter, bolder for this. We can also
use numbers in the multiples of 100 such as 100, 200 and so on up to 900.
Here 100 is the lightest and 900 is the boldest

for eg,
<!-- HTML -->
<body>
	<p id="first">Hello World</p>
	<p id="second">Second Paragraph</p>
</body>

<!-- CSS -->
#first {
	/* Bold */
  font-weight: bold;
}
#second {
	/* Normal */
  font-weight: 400; 
}

###---------------- Text Font Family :-

The font-family property can help us choose which font we want for our text.

By default, this value is serif. The other generic font families available are
sans-serif, monospace, cursive and fantasy

for eg,
<!-- HTML -->
<p id="serif">
  This is a serif font.
</p>

<!-- CSS -->
#serif {
   font-family: 'Times New Roman', serif;
}
p {
	font-size: 1.2em;
  margin-top: 10px;
}

Here, Serif is the fallback font for #serif id based element.


-------------------------------------------------------------------------------------
-> Q008 : Spacing With Padding in CSS;;

###---------------- Padding :-

The padding property defines the spacing within an element. It controls the
space between the content in the element and the element's boundaries.

for eg,
<!-- HTML -->
<body>
	<p> A paragraph with 2em padding on all four side </p>
</body>

<!-- CSS -->
p {
  background-color: tan;
  padding: 2em;
}

###---------------- Padding Shorthand Property :-

Instead of using individual properties for top, bottom, right and left
padding, the single padding property can be used to specify different values
for each direction.

-> Padding With Four values :-

If this property has four different values separated by spaces:

padding: 10px 20px 30px 40px;


10px is top padding
20px is right padding
30px is bottom padding
40px is left padding

The values get assigned in clockwise direction starting from the top.

-> Padding With Three values :-

If this property has three values:

padding: 10px 20px 30px;
10px is top padding
20px is right and left padding
30px is bottom padding

-> Padding With Two Values :-

If this property has two values:

padding: 10px 20px;

Top padding and bottom padding are both 10px.
Right padding and left padding are both 20px.

-> Padding With One value :-

If this property has only one value:

padding: 10px;

All four padding values are 10px

for eg,
<!-- HTML -->
<body> 
	<p>PARAGRAPH</p>
</body>

<!-- CSS -->
p {
	background-color: lightgray;
	padding: 50px 100px 80px 20px; /* top right bottom left */
}


-------------------------------------------------------------------------------------
-> Q007 : Spacing With Margin in CSS;;

###---------------- Margins :-

The margin property defines the spacing around an element.

for eg,
<!-- HTML -->
<body>
	<p>A paragraph with 2em margin on all four sides</p>
	<span>Another element here</span>
</body>

<!-- CSS -->
body {
  background-color: orange;
}
p {
  background-color: yellow;
  margin: 2em;
}

###---------------- Side Margin :-

We can separately set margin properties for each side of an element using
margin-top, margin-bottom, margin-left and margin-right.

for eg,
<!-- HTML -->
<body>
	<p id="first">
	  A paragraph with 50px margin at the top and 100px margin on the left
	</p>
	<p id="second">
	  Another paragraph with 80px margin on the right
	</p>
</body>

<!-- CSS -->
#first {
  background-color: yellow;
  margin-top: 50px;
  margin-left: 100px;
}
#second {
  background-color: orange;
  margin-right: 80px;
}

###---------------- Margin Shorthand Property :-

Instead of using individual properties for top, bottom, right and left
margins, the single margin property can be used to specify different values
for each direction.

-> Margin with Four values :-

If this property has four different values separated by spaces:

margin: 10px 20px 30px 40px;

10px is top margin
20px is right margin
30px is bottom margin
40px is left margin

for eg,
<!-- HTML -->
<body>
	<p id="first">A paragraph with four margin values</p>
	<p>Web design encompasses many different skills and disciplines in the
	production and maintenance of websites.</p>
</body>

<!-- CSS -->
#first {
  background-color: yellow;
  /* top right bottom left */
  margin: 50px 100px 80px 20px; 
}

-> Margin With Three Values :-

If this property has three values:

margin: 10px 20px 30px;

10px is top margin
20px is right margin as well as the left margin
30px is bottom margin

for eg,
<!-- HTML -->
<body>
	<p id="first">A paragraph with four margin values</p>
	<p>Web design encompasses many different skills and disciplines in the
	production and maintenance of websites.</p>
</body>

<!-- CSS -->
#first {
  background-color: yellow;
  /* top right-left bottom */
  margin: 50px 0px 80px; 
}

-> Margin With Two values :-
If this property has two values:

margin: 10px 20px;

10px is top and bottom margin
20px is right and left margin

for eg,
<!-- HTML -->
<body>
	<p id="first">A paragraph with four margin values</p>
	<p>Web design encompasses many different skills and disciplines in the
	production and maintenance of websites.</p>
</body>

<!-- CSS -->
#first {
  background-color: yellow;
  /* top-bottom right-left */
  margin: 50px 100px; 
}

-> Margin With One value
If this property has only one single value:

margin: 10px;

All four margins are 10px in size.

for eg,
<!-- HTML -->
<body>
	<p id="first">A paragraph with four margin values</p>
	<p>Web design encompasses many different skills and disciplines in the
	production and maintenance of websites.</p>
</body>

<!-- CSS -->
#first {
  background-color: yellow;
  margin: 50px;
}

###---------------- Margin With Negative Values :-

The margin properties can also accept negative values. This reduces the
spacing around elements.

for eg,
<!-- HTML -->
<body>
	<div id="first"></div>
	<div id="second"></div>
</body>

<!-- CSS -->
#first {
  background-color: orange;
  height: 100px;
}
#second {
  background-color: green;
  width: 50%;
  height: 100px;
  margin-top: -2em;
}

###---------------- Marign with Auto Alignments :-

The margin property can be set to auto value. This horizontally centers an
element.

The left and right margins are auto calculated by equally splitting the
remaining space.

for eg,
<!-- HTML -->
<body>
	<div id="auto-align">Check Alignment
</body>

<!-- CSS -->
.auto-align {
  width: 75%;
  margin: auto;
}

REMARK : 
- If margin-left is set to auto, the remaining space is assigned to left
  margin and hence the element aligns to the right.

- If margin-right is set to auto, the element aligns to the left.


-------------------------------------------------------------------------------------
-> Q006 : Min Width and Min Height;;

###---------------- Minimum Height (~ min-height) :-

The min-height property is used to define the minimum height of an element.

If the content is larger than the value given to the min-height, this property
has no effect. But, if it is smaller than the min-height value, the minimum
height is applied.

When both min-height and height are defined, the larger of the two values is
applied, as can be seen in the code examples given below:

for eg,
<!-- HTML -->
<body>
	<div>
		<p id="first"> FIRST PARAGRAPH </p>
		<p id="second"> SECOND PARAGRAPH </p>
	</div>
</body>

<!-- CSS -->
#first {
  /*Minimum height has no effect */
  min-height: 10px;
  background-color: yellow;
}
#second {
  height: 50px;
  min-height: 100px;
  /* Greatest value is applied */
  background-color: orange;
}

###---------------- Minimum Width (~ min-width) :-

The min-width property is used to define the minimum width of an element.

If the content is larger than the min-width value, this property has no
effect. But if the content is smaller than the min-width value, the minimum
width is applied.

When both min-width and width are defined, the larger of the two values is
applied.

View the editor in full screen mode and change the width of the output panel
to feel the difference.

for eg,
<!-- HTML -->
<body>
	<div>
		<p id="first"> FIRST PARAGRAPH </p>
		<p id="second"> SECOND PARAGRAPH </p>
	</div>
</body>

<!-- CSS -->
#first {
  width: 50%;
  min-width: 250px;
  /* Greatest value is applied */
  background-color: yellow;
}
#second {
  width: 50%;
  min-width: 500px;
  /* Greatest value is applied */
  background-color: orange;
}


-------------------------------------------------------------------------------------
-> Q005 : Max Width and Max Height;;

###---------------- Maximum Height (~ max-height) :-

The max-height property is used to define the maximum height of an element.

If the content is smaller than the value of the max-height, this property has
no effect. But, if the content is larger than the max-height value, the
content overflows.

When both max-height and height are defined, the smaller of the two values is
applied, as can be seen in the code example given below:

for eg,
<!-- HTML -->
<body>
	<p id="first">FIRST PARAGRAPH</p>
	<p id="second">SECOND PARAGRAPH</p>
</body>

<!-- CSS -->
#first {
  height: 100px;
  max-height: 200px;
  /* Least value is applied */
  background-color: yellow;
}
#second {
  height: 100px;
  max-height: 25px;
  /* Least value is applied */
  background-color: orange;
}

###---------------- Maximum Width (~ max-width) :-

The max-width property is used to define the maximum width of an element.

If the content is larger than the defined value, the height of the element
increases to make space.

When both max-width and width are defined, the least of the two values is
applied, as can be seen in the code examples given below:

for eg,
<!-- HTML -->
<body>
	<p id="first">Web Design</p>
	<p id="second">PARAGRAPH</p>
</body>

<!-- CSS -->
#first {
  /* Width is 100% by default */
  max-width: 200px;
  /* Least value is applied */
  background-color: yellow;
}
#second {
  width: 200px;
  max-width: 100px;
  /* Least value is applied */
  background-color: orange;
}


-------------------------------------------------------------------------------------
-> Q004 : CSS Sizing;;

###---------------- CSS : Heights;;

The height property is used to set the height of an element. Height can be
defined in percentage % or pixels px.

Percentage height is calculated based on the height of the immediate parent element.

for eg,
<!-- HTML -->
<body>
	<p>PARAGRAPH HERE...</p>
	<div>
	  <img src="fort-kochi-beach.jpg" alt="Fort Kochi Beach">
	</div>
</body>

<!-- CSS -->
p {
	font-size: 24px;
}
div {
	width : 250px;
	height : 250px;
	background-color: red;
}
img {
	width: 100%
}

###---------------- CSS : Width;;

The width property is used to set the width of an element. Width can be
defined in percentage % or pixels px.

for eg,
<!-- HTML -->
<body>
	<div id="parent">
		<div id="first">This div is set to 300px width</div>
		<div id="second">This div is set to 50% width</div>
	</div>
</body>

<!-- CSS -->
#parent {
  border: 3px solid darkcyan;
}
#first {
  width: 300px;
  height: 100px;
  background-color: yellow;
  border: 2px solid orange;
}
#second {
  width: 50%;
  height: 100px;
  background-color: orange;
  border : 2px solid yellow;
}

###---------------- CSS : Relative Units;;

When we use relative units to specify a length, it depends on the size of
other elements.

Let us look at some commonly used relative units

//--- Percentage '%' :- 

When width, height or font size of an element is specified in %, it is
relative to the parent element's width, height or font-size

for eg,
<!-- HTML -->
<body>
	<div>Width, height and font size in %</div>
	<p>Normal font size</p>
</body>

<!-- CSS -->
html, body {
  width: 100%;
  height: 100%;
  background-color: yellow;
}
div {
  width: 50%;
  height: 50%;
  background-color: orange;
  font-size: 200%;
}

//--- Reative Unit 'em' :-

When length of an element is specified using em, it is calculated based on the
font size of the element.

If this element has no font-size specified, the length is calculated based on
the font size of its nearest parent element.

Default, 1em = 16px

for eg, #1
<!-- HTML -->
<body>
	<div>Relative unit 'em'</div>
</body>

<!-- CSS -->
div {
	/* 10em = 10*font-size = 10*20px = 200px */
	/* width : 10*20px : 200px*/
	width: 10em;  
	/*height : 10*20px : 200px*/
	height: 10em;
	background-color: orange;
	font-size: 20px;
}

Example Note #1 : Here, the width and height of the div were calculated based
on the div's font-size.

for eg, #2 
<!-- HTML -->
<body>
	<div id="parent"><h1 id="child"> Relative unit 'em' </h1></div>
</body>

<!-- CSS -->
#parent {
  font-size: 20px;
}
#child {
  width: 5em;
  height: 5em;
  /* 
  font-size = 1 em = 1*20px = 20px
  width & height = 5em = 5*font-size = 5*20px = 100px
  */
  font-size: 1em;
  background-color: peachpuff;
}

Example Note #2 : The width and height of h1 was calculated based on h1's font
size. Though one thing different here is that, the font-size itself is given
in em. So the font-size value of h1 now depends on the font-size of its
parent element.


//--- Relative Unit 'rem' :-

When length is specified using rem, it is calculated based on the font size of
the root element of the page, which is the <html> element

for eg,
<!-- HTML -->
<html>
	<body>
 		<div id="first"></div>
		<div id="second"></div>
 </body>
</html>

<!-- CSS -->
html {
  font-size: 10px;
}
#first {
  width: 10rem;
  height: 10rem;
  background-color: beige;
  font-size: 1em;
}
#second {
  width: 10rem;
  height: 10rem;
  background-color: orange;
  font-size: 24px;
}

Example Note : The width and height of both the <div> depend on the font-size
of the html element. The sizes are not linked to the font-sizes of the
respective elements.

The width of the div is calculated as:
10rem = 10*font-size-of-html = 10*10px = 100px

//--- Relative Units 'vh' :-

When length is specified using vh, it is calculated based on the window
height, also known as viewport height.

1vh is 1% of the window height. So, 100vh is equivalent to the window height.

for eg,
<!-- HTML -->
<body>
	<div>Occupies 100% height of the window.</div>
</body>

<!-- CSS -->
div {
  height: 100vh;
  background-color: beige;
}

Example Remark : Viewport is the visible part of a screen. In the example
given above, the viewport is the rectangular window given below the code
editor and the div covers it completely with a height of 100vh.

//--- Relative Unit 'vw' :-

When length is specified using vw, it is calculated based on the window width,
also known as viewport width.

1vw is 1% of the window width. So, 100vw is equivalent to the window width.

for eg,
<!-- HTML -->
<body>
	<div>Occupies 50% width of the window, with same height.</div>
</body>

<!-- CSS -->
div {
  width: 50vw;
  height: 50vw;
  background-color: beige;
}

//--- Absolute Units :-

+ When we use absolute units to specify a length, the size is fixed and does not
	depend on the size of other elements.

+ Some absolute units are:
	1) Pixels, px
	2) Centimeters, cm
	3) Inches, in 

for eg,
<!-- HTML -->
<body>
	<div id="inches">
	  <div id="centi">
	    <div id="pixels">
	    </div>
	  </div>
	</div>
</body>

<!-- CSS -->
#inches {
  width: 2in;
  height: 2.5in;
  background-color: tomato;
}
#centi {
  width: 4cm;
  height: 4cm;
  background-color: orange;
}
#pixels {
  width: 100px;
  height: 50px;
  background-color: teal;
}

Example Remark : The size of these elements do not change when you change
their font size or parent element's size.



-------------------------------------------------------------------------------------
-> Q003 : CSS Color;;

###---------------- CSS : Color Names;;

Color names such as blue, yellow, black, white, gray, darkgreen in your CSS.

for eg,
<!-- HTML -->
<body>
	<h1>Light gray heading on a black background</h1>
</body>

<!-- CSS -->
body {
  background-color: black;
}
h1 {
  color: lightgray;
}

###---------------- CSS : RGB Colurs;;

RGB mix the 3 primary colours Red, Green and Blue in different proportions.
This way, we can create any colour that we require.

The <h1> has a text color of Orange because we mixed red with an intensity of
255, green with an intensity of 165 and blue with an intensity of 0.

The <p> element with id one has text color gray because in the rgb code, we
have all three colors with an intensity of 128.

Each parameter takes a value ranging from 0 to 255, 0 being least intensity
and 255 being highest intensity

for eg,
<!-- HTML -->
<body>
	<h1>Web Design</h1>
	<p id="one">First Paragraph</p>
	<p id="two">Second Paragraph</p>
</body>

<!-- CSS -->
h1 {
  /* Orange */
  color: rgb(255, 165, 0);
}
#one {
  /* Gray */
  color: rgb(128, 128, 128);
}
#two {
  /* Black background */
  background-color: rgb(0, 0, 0);
  /* White text */
  color: rgb(255, 255, 255);
}

###---------------- CSS : HEX Colurs;;

HEX color value is a mix of Red, Green, Blue color values. The colour code
uses the hexadecimal number range from 00 to ff to represent the different
intensities

for eg,
<!-- HTML -->
<body>
	<h1>Web Design</h1>
	<p id="one">First Paragraph</p>
	<p id="two">Second Paragraph</p>
</body>

<!-- CSS -->
h1 {
  /* Orange */
  color: #ffa500;
}
#one {
  /* Gray */
  color: #808080;
}
#two {
  /* Black background */
  background-color: #000000;
  /* White text */
  color: #ffffff;
}


-------------------------------------------------------------------------------------
-> Q002 : Selectors Brief;;

###---------------- CSS : Element Selectors;;

Selectors like h2 and p are Element Selectors. They select elements using
their HTML tag name.

for eg,
<!-- HTML -->
<body>
	<h2>The Sun</h2>
	<p>
	  The Sun is the Solar System's star and by far its most massive component.
	</p>
</body>

<!-- CSS -->
h2 {
  text-decoration: underline;
}
p {
  color: darkblue;
}

###---------------- CSS : Class Selectors;;

An element selector selects all the elements with that tag. But what if we
need to give a different color only to the second and third headings

In such case we can use class attribute to select elements. The . symbol is
used before the class name to select the element

for eg,
<!-- body -->
<body>
	<h2> Solar System </h2>
	<p>
	  The Solar System is the gravitationally bound system of the Sun and the objects that orbit it, either directly or indirectly.
	</p>
	<h2 class="heading">The Sun</h2>
	<p class="brief">The Sun is the Solar System's star and by far its most massive component.</p>
</body>

<!-- CSS -->
body {
	background-color: lightgrey;
}
.heading {
	font-size : 24rem;
}
.brief {
	color : darkgrey;
}

###---------------- CSS : ID Selectors;;

When we need to style only one element on the page differently, using a class
selector is not the best way.

We can use the HTML id attribute to select that single element. The # symbol
is used before the id name to select it

for eg,
<body>
	<h2 id="title">Solar System</h2>
	<p>The Solar System is the gravitationally bound system of the Sun and the 
	objects that orbit it, either directly or indirectly.</p>
</body>

<!-- CSS -->
#title {
  font-size: 36px;
}
p {
  color: darkblue;
}

###---------------- CSS : Universal Selectors;;

Sometimes, we need to apply some common styles to all elements on a web page.
For this, we can use the universal selector *. 

This applies the specified styles to all the elements.

for eg,
<!-- HTML -->
<body>
	<h2>Solar System</h2>
	<p>The Solar System is the gravitationally bound system of the Sun and the objects that orbit it, either directly or indirectly.</p>
	<a href="#">Read more</a>
</body>

<!-- CSS -->
* {
  color: darkgreen;
}


-------------------------------------------------------------------------------------
-> Q001 : CSS Core;;

###---------------- CSS : Selectors

Selector are used to select the HTML elements that we want to style. 

for eg.
<!-- HTML -->
<body>
	<h1>
	  Solar System
	</h1>
	<p>
	  The Solar System is the gravitationally bound system of the Sun and the objects that orbit it, either directly or indirectly.
	</p>
</body>

<!-- CSS -->
body {
	background-color: yellow;
}
h1 {
	color : darkgreen;
}
p {
	font-size : 18px;
}

###---------------- CSS : Properties and Values;

Properties that we want to change like background-color, color and font-size etc

Values are that we provide to the properties like beige, darkgreen, blue, 18px etc

for eg,
<!-- HTML -->
<body>
	<h1>Solar System</h1>
	<p>The Solar System is the gravitationally bound system of the Sun and the objects that orbit it, either directly or indirectly.</p>
</body>

<!-- CSS -->
body {
  background-color: beige;
}
h1 {
  color: darkgreen;
}
p {
  font-size: 18px;
}

###---------------- CSS : Comments;

CSS comments start with /* and end with */. They can be single line or span
across multiple lines.

for eg,
/* This is a comment */

/* Here is a
multi-line comment */

body {
  /* background-color: yellow; */
}


-------------------------------------------------------------------------------------